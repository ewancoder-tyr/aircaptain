# TODO: Add badge information on which version is currently deployed to which env.
name: Deploy

on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v*"

env:
  PROJECT_NAME: aircaptain
  API_IMAGE: aircaptain-api
  WEB_IMAGE: aircaptain-web
  API_DOCKERFILE: api/AirCaptain.Api/Dockerfile
  WEB_DOCKERFILE: web/Dockerfile
  REGISTRY: ghcr.io
  BADGE_GIST_ID: 0184962696ef0364be7a3f491133f2f9
  REPO_USER: ewancoder
  CHECK_FETCH_DEPTH: 30
  DOTNET_VERSION: "9.0.x"

jobs:
  check-changes:
    name: Check changes
    runs-on: ubuntu-latest
    outputs:
      web_changed: ${{ steps.filter.outputs.web }}
      api_changed: ${{ steps.filter.outputs.api }}
      db_changed: ${{ steps.filter.outputs.db }}

    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ env.CHECK_FETCH_DEPTH }}

      - name: Check changes
        id: filter
        run: ./.github/scripts/check-changes.sh web api db
        env:
          PREVIOUS_SHA: ${{ github.event.before }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_API_URL: ${{ github.api_url }}

  generate-todos:
    name: Check TODOs
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check TODOs
        run: ./.github/scripts/list-todos.sh
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}

      # TODO: Consider adding icon/logo here.
      - name: Create TODOs badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ env.BADGE_GIST_ID }}
          filename: ${{ env.PROJECT_NAME }}-todos-${{ github.ref_name }}.json
          label: TODOs
          message: ${{ env.TODOS_COUNT }}
          color: "#7dcbff"

  test-api:
    name: Test API
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.api_changed == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test API
        uses: ./.github/actions/test-dotnet
        with:
          folder: api
          coverageId: ${{ env.API_IMAGE }}
          gistSecret: ${{ secrets.GIST_SECRET }}

  test-api-mutation:
    name: API mutation testing
    runs-on: ubuntu-latest
    needs: test-api

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: API mutation testing
        uses: ./.github/actions/test-dotnet-mutation
        with:
          folder: api

  test-api-sonarqube:
    name: SonarQube static analysis
    runs-on: ubuntu-latest
    needs: test-api

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: API Sonar analysis
        uses: ./.github/actions/test-dotnet-sonarqube
        with:
          sonarToken: ${{ secrets.API_SONAR_TOKEN }}

  build-api:
    name: Build API
    runs-on: ubuntu-latest
    needs: test-api
    outputs:
      sha: ${{ steps.save.outputs.sha }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_USER }}/${{ env.API_IMAGE }}
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
            type=semver,pattern={{raw}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=sha,format=long,prefix=sha-{{branch}}-

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ./api
          file: ${{ env.API_DOCKERFILE }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Save SHA tag for deployment
        id: save
        run: |
          SHA_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep "sha-" | cut -d':' -f2)
          echo "Saving SHA tag: $SHA_TAG"
          echo "sha=$SHA_TAG" >> $GITHUB_OUTPUT

  test-web:
    name: Test Web
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.web_changed == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test Web
        uses: ./.github/actions/test-angular
        with:
          folder: web
          coverageId: ${{ env.WEB_IMAGE }}
          gistSecret: ${{ secrets.GIST_SECRET }}

  test-web-mutation:
    name: Web mutation testing
    runs-on: ubuntu-latest
    needs: test-web
    if: false # Disable for now, doesn't work with Angular 20.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test Web
        uses: ./.github/actions/test-angular-mutation
        with:
          folder: web

  test-web-sonarqube:
    name: SonarQube static analysis
    runs-on: ubuntu-latest
    needs: test-web

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test Web
        uses: ./.github/actions/test-angular-sonarqube
        with:
          folder: web
          sonarToken: ${{ secrets.WEB_SONAR_TOKEN }}

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: test-web
    outputs:
      sha: ${{ steps.save.outputs.sha }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set CONFIG_FILE based on environment
        id: set-config
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "CONFIG_FILE=config.development.ts" >> $GITHUB_ENV
          else
            echo "CONFIG_FILE=config.production.ts" >> $GITHUB_ENV
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_USER }}/${{ env.WEB_IMAGE }}
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
            type=semver,pattern={{raw}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=sha,format=long,prefix=sha-{{branch}}-

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ./web
          file: ${{ env.WEB_DOCKERFILE }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            CONFIG_FILE=${{ env.CONFIG_FILE }}

      - name: Save SHA tag for deployment
        id: save
        run: |
          SHA_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep "sha-" | cut -d':' -f2)
          echo "Saving SHA tag: $SHA_TAG"
          echo "sha=$SHA_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [check-changes, build-api, build-web]
    if: |
      always() && !cancelled() && !failure() &&
      (startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')) &&
      (
        needs.check-changes.outputs.api_changed == 'true' ||
        needs.check-changes.outputs.web_changed == 'true' ||
        needs.check-changes.outputs.db_changed == 'true'
      )

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          passphrase: ${{ secrets.PASSWORD }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: "db,docker-compose.yml,.env.prod"
          target: /tmp/${{ env.PROJECT_NAME }}_prod

      - name: Deploy to DO
        uses: appleboy/ssh-action@v1.2.2
        env:
          DB_CHANGED: ${{ needs.check-changes.outputs.db_changed }}
          API_SHA_TAG: ${{ needs.build-api.outputs.sha }}
          WEB_SHA_TAG: ${{ needs.build-web.outputs.sha }}
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          DEPLOYMENT_ENVIRONMENT: prod
          DEPLOYMENT_IS_PRODUCTION: true
          IS_SWARM: true # Change to false to switch to non-swarm mode.
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          passphrase: ${{ secrets.PASSWORD }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          envs: DB_CHANGED,API_SHA_TAG,WEB_SHA_TAG,PROJECT_NAME,DEPLOYMENT_ENVIRONMENT,DEPLOYMENT_IS_PRODUCTION,IS_SWARM
          script_path: .github/scripts/deploy.sh

  deploy-develop:
    name: Deploy Development
    runs-on: ubuntu-latest
    needs: [check-changes, build-api, build-web]
    if: |
      always() && !cancelled() && !failure() &&
      github.ref == 'refs/heads/develop' &&
      (
        needs.check-changes.outputs.api_changed == 'true' ||
        needs.check-changes.outputs.web_changed == 'true' ||
        needs.check-changes.outputs.db_changed == 'true'
      )

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.HOST }} # Change to HOST_DEV, USERNAME_DEV etc for non-swarm mode.
          username: ${{ secrets.USERNAME }}
          passphrase: ${{ secrets.PASSWORD }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: "db,docker-compose.yml,.env.dev"
          target: /tmp/${{ env.PROJECT_NAME }}_dev

      - name: Deploy to DEV
        uses: appleboy/ssh-action@v1.2.2
        env:
          DB_CHANGED: ${{ needs.check-changes.outputs.db_changed }}
          API_SHA_TAG: ${{ needs.build-api.outputs.sha }}
          WEB_SHA_TAG: ${{ needs.build-web.outputs.sha }}
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          DEPLOYMENT_ENVIRONMENT: dev
          DEPLOYMENT_IS_PRODUCTION: false
          IS_SWARM: true # Change to false to switch to non-swarm mode.
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          passphrase: ${{ secrets.PASSWORD }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          envs: DB_CHANGED,API_SHA_TAG,WEB_SHA_TAG,PROJECT_NAME,DEPLOYMENT_ENVIRONMENT,DEPLOYMENT_IS_PRODUCTION,IS_SWARM
          script_path: .github/scripts/deploy.sh
